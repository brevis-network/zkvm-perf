name: Benchmark Suite

on:
  workflow_dispatch:
    inputs:
      instances:
        required: true
        type: string
      provers:
        required: true
        type: string
      programs:
        required: true
        type: string
      shard_sizes:
        required: true
        type: string

jobs:
  run:
    strategy:
      fail-fast: false
      matrix:
        prover: ${{ fromJSON(github.event.inputs.provers) }}
        instance: ${{ fromJSON(github.event.inputs.instances) }}
        shard_size: ${{ fromJSON(github.event.inputs.shard_sizes) }}
    name: Run (${{ matrix.instance }}, ${{ matrix.prover }}, ${{ matrix.shard_size }})
    runs-on:
      [
        "runs-on",
        "runner=${{ matrix.instance }}",
        "spot=false",
        "run-id=${{ github.run_id }}",
      ]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4 

      - name: Setup workflow
        uses: ./.github/actions/setup

      - name: Run install.sh
        run: |
          bash install.sh

      - name: Make benchmarks directory
        run: mkdir -p ${{ github.workspace }}/benchmarks

      - name: Run benchmark
        run: |
          python3 sweep.py \
            --filename benchmark  \
            --trials 1 \
            --programs $(echo ${{ inputs.programs }} | sed 's/,/ /g') \
            --provers ${{ matrix.prover }} \
            --shard-sizes ${{ matrix.shard_size }}

      - name: List benchmark results
        run: ls -la ${{ github.workspace }}/benchmarks

      - name: Echo benchmark results
        run: cat benchmarks/benchmarks_latest.csv

      - name: Convert CSV to JSON array
        id: convert
        run: |
          echo "json_data=$(python3 -c '
          import csv, json, sys
          with open("${{ github.workspace }}/benchmarks/benchmarks_latest.csv") as f:
              reader = csv.reader(f)
              next(reader)
              data = list(reader)
              run_id = "${{ github.run_id }}"
              git_ref = "${{ github.sha }}"
              instance = "${{ matrix.instance }}"
              for row in data:
                  row.insert(0, instance)
                  row.insert(0, git_ref)
                  row.insert(0, run_id)
              print(json.dumps(data))
          ')" >> $GITHUB_OUTPUT

      - name: Push to google sheets
        uses: jroehl/gsheet.action@v2.0.0
        with:
          spreadsheetId: 1dGzQbLxlQTaYgvUSnU9xmgrluE2G9WjM6cpdWC04kiw
          commands: |
            [
              { "command": "getWorksheet", "args": { "worksheetTitle": "Runs" }},
              { "command": "appendData", "args": { "data": ${{ steps.convert.outputs.json_data }}, "minCol": "1" }}
            ]
        env:
          GSHEET_CLIENT_EMAIL: ${{ secrets.GSHEET_CLIENT_EMAIL }}
          GSHEET_PRIVATE_KEY: ${{ secrets.GSHEET_PRIVATE_KEY }}